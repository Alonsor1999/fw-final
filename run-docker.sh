#!/bin/bash

# Script para ejecutar contenedores Docker en macOS
# Framework Final - Docker Management Script

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar el banner
show_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    FRAMEWORK FINAL                           ‚ïë"
    echo "‚ïë                 Docker Management Script                     ‚ïë"
    echo "‚ïë                        macOS Edition                         ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${YELLOW}Uso: $0 [COMANDO]${NC}"
    echo ""
    echo "Comandos disponibles:"
    echo "  start     - Iniciar todos los contenedores"
    echo "  stop      - Detener todos los contenedores"
    echo "  restart   - Reiniciar todos los contenedores"
    echo "  status    - Mostrar estado de los contenedores"
    echo "  logs      - Mostrar logs de los contenedores"
    echo "  build     - Reconstruir la imagen de la aplicaci√≥n"
    echo "  clean     - Limpiar contenedores e im√°genes no utilizadas"
    echo "  shell     - Acceder al shell del contenedor principal"
    echo "  backup    - Crear backup de la base de datos"
    echo "  help      - Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0 start"
    echo "  $0 status"
    echo "  $0 logs"
}

# Funci√≥n para verificar si Docker est√° ejecut√°ndose
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker no est√° ejecut√°ndose. Por favor inicia Docker Desktop.${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Docker est√° ejecut√°ndose${NC}"
}

# Funci√≥n para iniciar contenedores
start_containers() {
    echo -e "${BLUE}üöÄ Iniciando contenedores...${NC}"
    
    # Crear directorios necesarios si no existen
    mkdir -p logs backups
    
    # Iniciar contenedores en background
    docker-compose up -d
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Contenedores iniciados correctamente${NC}"
        echo ""
        echo -e "${YELLOW}üìã URLs de acceso:${NC}"
        echo "  üåê Framework App: http://localhost:8000"
        echo "  üóÑÔ∏è  PostgreSQL: localhost:5432"
        echo "  üî¥ Redis: localhost:6379"
        echo "  üê∞ RabbitMQ: localhost:5672"
        echo "  üê∞ RabbitMQ Admin: http://localhost:15672 (admin/admin)"
        echo "  üîê Vault: http://localhost:8200"
        echo ""
        echo -e "${YELLOW}üìä Para ver el estado: $0 status${NC}"
        echo -e "${YELLOW}üìù Para ver logs: $0 logs${NC}"
    else
        echo -e "${RED}‚ùå Error al iniciar contenedores${NC}"
        exit 1
    fi
}

# Funci√≥n para detener contenedores
stop_containers() {
    echo -e "${YELLOW}üõë Deteniendo contenedores...${NC}"
    docker-compose down
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Contenedores detenidos correctamente${NC}"
    else
        echo -e "${RED}‚ùå Error al detener contenedores${NC}"
        exit 1
    fi
}

# Funci√≥n para reiniciar contenedores
restart_containers() {
    echo -e "${BLUE}üîÑ Reiniciando contenedores...${NC}"
    docker-compose restart
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Contenedores reiniciados correctamente${NC}"
    else
        echo -e "${RED}‚ùå Error al reiniciar contenedores${NC}"
        exit 1
    fi
}

# Funci√≥n para mostrar estado
show_status() {
    echo -e "${BLUE}üìä Estado de los contenedores:${NC}"
    echo ""
    docker-compose ps
    echo ""
    
    # Mostrar uso de recursos
    echo -e "${BLUE}üíæ Uso de recursos:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
}

# Funci√≥n para mostrar logs
show_logs() {
    echo -e "${BLUE}üìù Mostrando logs de los contenedores...${NC}"
    echo -e "${YELLOW}Presiona Ctrl+C para salir de los logs${NC}"
    echo ""
    docker-compose logs -f
}

# Funci√≥n para reconstruir imagen
build_image() {
    echo -e "${BLUE}üî® Reconstruyendo imagen de la aplicaci√≥n...${NC}"
    docker-compose build --no-cache
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Imagen reconstruida correctamente${NC}"
        echo -e "${YELLOW}üí° Ejecuta '$0 start' para iniciar con la nueva imagen${NC}"
    else
        echo -e "${RED}‚ùå Error al reconstruir la imagen${NC}"
        exit 1
    fi
}

# Funci√≥n para limpiar
clean_docker() {
    echo -e "${YELLOW}üßπ Limpiando Docker...${NC}"
    
    # Preguntar confirmaci√≥n
    read -p "¬øEst√°s seguro de que quieres limpiar contenedores e im√°genes no utilizadas? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker system prune -f
        docker volume prune -f
        echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
    else
        echo -e "${YELLOW}‚ùå Limpieza cancelada${NC}"
    fi
}

# Funci√≥n para acceder al shell
access_shell() {
    echo -e "${BLUE}üêö Accediendo al shell del contenedor principal...${NC}"
    docker-compose exec framework-app /bin/bash
}

# Funci√≥n para crear backup
create_backup() {
    echo -e "${BLUE}üíæ Creando backup de la base de datos...${NC}"
    
    # Crear directorio de backups si no existe
    mkdir -p backups
    
    # Crear nombre del archivo con timestamp
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_FILE="backups/framework_db_backup_${TIMESTAMP}.sql"
    
    # Crear backup
    docker-compose exec -T postgres pg_dump -U framework_user framework_db > "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Backup creado: $BACKUP_FILE${NC}"
        echo -e "${YELLOW}üìÅ Ubicaci√≥n: $(pwd)/$BACKUP_FILE${NC}"
    else
        echo -e "${RED}‚ùå Error al crear backup${NC}"
        exit 1
    fi
}

# Funci√≥n principal
main() {
    show_banner
    
    # Verificar Docker
    check_docker
    
    # Procesar comando
    case "${1:-help}" in
        start)
            start_containers
            ;;
        stop)
            stop_containers
            ;;
        restart)
            restart_containers
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs
            ;;
        build)
            build_image
            ;;
        clean)
            clean_docker
            ;;
        shell)
            access_shell
            ;;
        backup)
            create_backup
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando no v√°lido: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@" 