#!/usr/bin/env python3
"""
Script simple para probar el logger sin depender del framework completo
"""

import sys
import os
from datetime import datetime

# Agregar el framework al path
sys.path.append(os.path.dirname(__file__))

try:
    from framework.shared.logger import Logger
    print("‚úÖ Logger importado correctamente")
    
    # Asegurar que los directorios de logs existan
    Logger.ensure_log_directories()
    print("‚úÖ Directorios de logs creados")
    
    # Probar logging b√°sico
    Logger.info("Test de informaci√≥n desde script simple")
    Logger.error("Test de error desde script simple")
    Logger.debug("Test de debug desde script simple")
    Logger.warning("Test de advertencia desde script simple")
    Logger.critical("Test cr√≠tico desde script simple")
    
    print("‚úÖ Logs b√°sicos escritos correctamente")
    
    # Probar logging con par√°metros
    robot_id = "test_robot_001"
    Logger.info(
        "Test de informaci√≥n con par√°metros",
        robot_id=robot_id,
        module_name="test_script"
    )
    
    Logger.error(
        "Test de error con par√°metros",
        robot_id=robot_id,
        module_name="test_script"
    )
    
    print("‚úÖ Logs con par√°metros escritos correctamente")
    
    # Verificar archivos creados
    log_paths = Logger.get_log_paths()
    print(f"üìÅ Rutas de logs: {log_paths}")
    
    for name, path in log_paths.items():
        if os.path.exists(path):
            files = [f for f in os.listdir(path) if f.endswith('.log')]
            print(f"‚úÖ {name}: {path} - {len(files)} archivos")
            for file in files:
                print(f"   üìÑ {file}")
        else:
            print(f"‚ùå {name}: {path} - NO EXISTE")
    
    print("\nüéâ ¬°Prueba del logger completada exitosamente!")
    
except ImportError as e:
    print(f"‚ùå Error importando Logger: {e}")
    import traceback
    traceback.print_exc()
except Exception as e:
    print(f"‚ùå Error durante la prueba: {e}")
    import traceback
    traceback.print_exc()
